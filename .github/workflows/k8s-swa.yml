name: build and deploy to k8s

env:
  HELM_VERSION: v3.9.2
  CHART_REVISION: v6
  CHART_PATH: _CHARTS_
  CHART_TYPE: webpage
  PIPELINE_REVISION: v6
  PIPELINE_PATH: _PIPELINE_
  DOCKERFILE_PATH: Dockerfiles/swa

on:
  workflow_call:
    inputs:
      node-version:
        type: string
        required: true
        default: 16.14.2
      build-command:
        type: string
        required: false
        default: npm run ci && npm run build
      namespace:
        type: string
        required: false
        default: matrix-webpages
      external:
        type: boolean
        required: false
        default: true
      output-dir:
        type: string
        required: false
        default: dist

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

# Configuration Setup
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN_CUSTOM }}

      - name: prd
        if: github.ref_name == 'main'
        run: |
          echo "ENVIRONMENT=PRD" >> $GITHUB_ENV
          echo "ENVIRONMENT_LOWER=prd" >> $GITHUB_ENV
          echo "APP_REVISION=prd" >> $GITHUB_ENV

      - name: hml
        if: github.ref_name == 'hml'
        run: |
          echo "ENVIRONMENT=HML" >> $GITHUB_ENV
          echo "ENVIRONMENT_LOWER=hml" >> $GITHUB_ENV
          echo "APP_REVISION=hml" >> $GITHUB_ENV

      - name: not prd or hml
        if: ( github.ref_name != 'main' && github.ref_name != 'hml' )
        run: |
          echo "ENVIRONMENT=DEV" >> $GITHUB_ENV
          echo "ENVIRONMENT_LOWER=dev" >> $GITHUB_ENV
          echo "APP_REVISION=${GITHUB_REF_NAME//\//-}" >> $GITHUB_ENV

      - name: Configure variables
        run: |
          REGISTRY_NAME=${ENVIRONMENT_LOWER}akscr.azurecr.io
          APP_NAME=${GITHUB_REPOSITORY/'Matrix-Energia/'/}
          APP_NAME=${APP_NAME/matrix./}
          APP_NAME=${APP_NAME//./-}
          echo "APP_NAME=${APP_NAME}"                               >> $GITHUB_ENV
          echo "KUBE_CONFIG=MATRIX_${ENVIRONMENT}_AKS_KUBE_CONFIG"  >> $GITHUB_ENV
          echo "REGISTRY_NAME=${REGISTRY_NAME}"                     >> $GITHUB_ENV
          echo "REGISTRY_PWD=MATRIX_${ENVIRONMENT}_ACR_PASSWORD"    >> $GITHUB_ENV
          echo "REGISTRY_USR=MATRIX_${ENVIRONMENT}_ACR_USERNAME"    >> $GITHUB_ENV
          echo "IMAGE=${REGISTRY_NAME}/${GITHUB_REPOSITORY,,}"      >> $GITHUB_ENV
          echo "TAG=${GITHUB_SHA}"                                  >> $GITHUB_ENV
          echo "CONFIG=${ENVIRONMENT}_CONFIG"                       >> $GITHUB_ENV

# Docker setup
      - name: clone dockerfile
        uses: actions/checkout@v3
        with:
          repository: 'Matrix-Energia/matrix.devops.pipelines.git'
          ref: ${{ env.PIPELINE_REVISION }}
          path: ${{ env.PIPELINE_PATH }}
          token: ${{ secrets.GIT_TOKEN_CUSTOM }}
      
      - name: copy dockerfile
        run: |
          rm Dockerfile nginx.conf
          mv ${{ env.PIPELINE_PATH }}/${{ env.DOCKERFILE_PATH }}/* ./

      - name: Check files
        run: ls -la && ls -la ${{ env.PIPELINE_PATH }}

# Docker registry setup
      - name: docker login 
        uses: Azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets[env.REGISTRY_USR] }}
          password: ${{ secrets[env.REGISTRY_PWD] }}
# Helm Setup
      - name: install helm tool
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: clone helms
        uses: actions/checkout@v3
        with:
          repository: 'Matrix-Energia/matrix.devops.template.charts.git'
          ref: ${{ env.CHART_REVISION }}
          path: ${{ env.CHART_PATH }}
          token: ${{ secrets.GIT_TOKEN_CUSTOM }}

# k8s Cluster Setup
      - name: connect to cluster
        uses: Azure/k8s-set-context@v2
        with:
          kubeconfig: ${{ secrets[env.KUBE_CONFIG] }}

# Build Application and Container        
      - name: Install nodejs ${{ inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Create .env
        run: |
          rm -rf .env
          echo ${{ secrets[env.CONFIG] }} > .env

      - name: Build application
        run: ${{ inputs.build-command }}

      - name: Docker build
        run: |          
          docker build \
            --build-arg DESTINATION=${{ inputs.output-dir }} . \
            -t ${IMAGE}:${TAG} \
            -t ${IMAGE}:latest

# Docker Push
      - name: docker push
        run: docker push --all-tags ${IMAGE}

# Install to Cluster
      - name: install helm chart
        run: |
          helm upgrade ${{ env.APP_NAME }}-${{ env.APP_REVISION }} \
            ${{ env.CHART_PATH }}/${{ env.CHART_TYPE }} \
            --install \
            --namespace ${{ inputs.namespace }} \
            --create-namespace \
            --set environment=${{ env.ENVIRONMENT_LOWER }} \
            --set image=${{ env.IMAGE }}:${{ env.TAG }} \
            --set external=${{ inputs.external }}
