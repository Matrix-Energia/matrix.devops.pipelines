name: k8s Api v7
# echo APP_TAG="${GITHUB_SHA:0:8}-${GITHUB_RUN_NUMBER}"       >> $GITHUB_ENV
env:
  CLONE_TOKEN: GIT_TOKEN_CUSTOM
  PUBLISH_TOKEN: PACKAGES_TOKEN
  HELM_VERSION: v3.9.2
  CHART_REPOSITORY: 'Matrix-Energia/matrix.devops.template.charts.git'
  CHART_REVISION: v7
  CHART_PATH: charts
  CHART_TYPE: api

on:
  workflow_call:
    inputs:
      namespace:
        type: string
        required: false
        default: matrix-apps
      values:
        type: string
        required: false
        default: .ci/values.yaml
      tokenName:
        type: string
        required: false
        default: GIT_TOKEN

jobs:
  app-configuration:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.configure-app.outputs.environment }}
      name: ${{ steps.configure-app.outputs.name }}
      revision: ${{ steps.configure-app.outputs.name }}
      image: ${{ steps.configure-app.outputs.image }}
      tag: ${{ steps.configure-app.outputs.tag }}
      kube_config: ${{ steps.configure-app.outputs.kube_config }}
      config_b64: ${{ steps.parse-variables.outputs.config_b64 }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets[env.CLONE_TOKEN] }}
      - name: prd
        if: github.ref_name == 'main'
        run: |
          echo "ENVIRONMENT=PRD"                    >> $GITHUB_ENV
          echo "APP_REVISION=prd"                   >> $GITHUB_ENV
      - name: hml
        if: github.ref_name == 'hml'
        run: |
          echo "ENVIRONMENT=HML"                    >> $GITHUB_ENV
          echo "APP_REVISION=hml"                   >> $GITHUB_ENV
      - name: not prd or hml
        if: ( github.ref_name != 'main' && github.ref_name != 'hml' )
        run: |
          REV_NAME=${GITHUB_REF_NAME,,}
          echo "ENVIRONMENT=DEV"                    >> $GITHUB_ENV                  
          echo "APP_REVISION=${REV_NAME//\//-}"     >> $GITHUB_ENV

      - name: set-vars
        run: |
          APP_NAME="${GITHUB_REPOSITORY/'Matrix-Energia/'/}"
          APP_NAME="${APP_NAME/matrix./}"
          APP_NAME="${APP_NAME//./-}"
          ENVIRONMENT_LOWER="${ENVIRONMENT,,}"
          REGISTRY_NAME="${ENVIRONMENT_LOWER}akscr.azurecr.io"
          echo REGISTRY_NAME="${REGISTRY_NAME}"                       >> $GITHUB_ENV
          echo REGISTRY_USR="MATRIX_${ENVIRONMENT}_ACR_USERNAME"      >> $GITHUB_ENV 
          echo REGISTRY_PWD="MATRIX_${ENVIRONMENT}_ACR_PASSWORD"      >> $GITHUB_ENV 
          echo ENVIRONMENT_LOWER="${ENVIRONMENT_LOWER}"               >> $GITHUB_ENV
          echo APP_NAME="${APP_NAME}"                                 >> $GITHUB_ENV
          echo APP_CONFIG="${ENVIRONMENT}_CONFIG"                     >> $GITHUB_ENV
          echo APP_IMAGE="${REGISTRY_NAME}/${GITHUB_REPOSITORY,,}"    >> $GITHUB_ENV
          echo APP_TAG="${GITHUB_SHA:0:8}"                            >> $GITHUB_ENV
          echo KUBE_CONFIG="MATRIX_${ENVIRONMENT}_AKS_KUBE_CONFIG"    >> $GITHUB_ENV 
      - name: configure app
        id: configure-app
        run: |
          echo "::set-output name=environment::${{ env.ENVIRONMENT_LOWER }}"
          echo "::set-output name=name::${{ env.APP_NAME }}"
          echo "::set-output name=revision::${{ env.APP_REVISION }}"
          echo "::set-output name=image::${{ env.APP_IMAGE }}"
          echo "::set-output name=tag::${{ env.APP_TAG }}"
          echo "::set-output name=kube_config::${{ env.KUBE_CONFIG }}"

      - name: make yaml cfg plain
        id: parse-variables
        uses: mikefarah/yq@master
        with: 
          cmd: |
            echo ${{ secrets[env.APP_CONFIG] }} > .cfgComplex
            cat .cfgComplex | base64 -d | yq e '.. | select(. == "*") | {(path | . as $x | (.[] | select((. | tag) == "!!int") |= (["[", ., "]"] | join(""))) | $x | join(".") | sub(".\[", "[")): .} ' - | base64 -w0 > .cfgFlat
            echo "::set-output name=config_b64::$(cat .cfgFlat)"
      - name: docker login
        uses: Azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets[env.REGISTRY_USR] }}
          password: ${{ secrets[env.REGISTRY_PWD] }}
      - name: docker build
        run: |
          docker build \
            --build-arg ${{ inputs.tokenName }}=${{ secrets.PACKAGES_TOKEN }} \
            -t "${{ env.APP_IMAGE }}:${{ env.APP_TAG }}" \
            -t "${{ env.APP_IMAGE }}:latest" \
            .
      - name: docker push
        run: docker push --all-tags ${{ env.APP_IMAGE }}

  install-helm:
    runs-on: ubuntu-latest
    needs: [ app-configuration ]
    steps:
      - name: set-vars
        run: |
          echo KUBE_CONFIG="${{ needs.app-configuration.outputs.kube_config }}"  >> $GITHUB_ENV
      - name: connect to cluster
        uses: Azure/k8s-set-context@v2
        with:
          kubeconfig: ${{ secrets[env.KUBE_CONFIG] }}
      - name: install helm tool
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
      - name: clone helms
        uses: actions/checkout@v3
        with:
          repository: ${{ env.CHART_REPOSITORY }}
          ref: ${{ env.CHART_REVISION }}
          path: ${{ env.CHART_PATH }}
          token: ${{ secrets[env.CLONE_TOKEN] }}
      - name: install helm chart
        run: |
          ls -lah
          helm upgrade ${{ needs.app-configuration.outputs.name }}-${{ needs.app-configuration.outputs.revision }} \
            ${{ env.CHART_PATH }}/${{ env.CHART_TYPE }} \
            --install \
            --wait \
            --timeout 6m0s \
            --namespace '${{ inputs.namespace }}' \
            --values    '${{ inputs.values }}' \
            --set       environment='${{ needs.app-configuration.outputs.environment }}' \
            --set       image='${{ needs.app-configuration.outputs.image }}:${{ needs.app-configuration.outputs.tag }}' \
            --set       repository='${{ github.repository }}' \
            --set       config='${{ needs.app-configuration.outputs.config-b64 }}'
