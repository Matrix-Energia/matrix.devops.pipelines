name: build and deploy to k8s

env:
  HELM_VERSION: v3.9.2
  CHART_REVISION: v6
  CHART_PATH: charts
  CHART_TYPE: api

on:
  workflow_call:
    inputs:
      namespace:
        type: string
        required: false
        default: matrix-apps
      values:
        type: string
        required: false
        default: .ci/values.yaml
      tokenName:
        type: string
        required: false
        default: GIT_TOKEN

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN_CUSTOM }}

      - name: prd
        if: github.ref_name == 'main'
        run: |
          echo "ENVIRONMENT=PRD" >> $GITHUB_ENV
          echo "ENVIRONMENT_LOWER=prd" >> $GITHUB_ENV
          echo "APP_REVISION=prd" >> $GITHUB_ENV

      - name: hml
        if: github.ref_name == 'hml'
        run: |
          echo "ENVIRONMENT=HML" >> $GITHUB_ENV
          echo "ENVIRONMENT_LOWER=hml" >> $GITHUB_ENV
          echo "APP_REVISION=hml" >> $GITHUB_ENV

      - name: not prd or hml
        if: ( github.ref_name != 'main' && github.ref_name != 'hml' )
        run: |
          REV_NAME=${GITHUB_REF_NAME,,}
          echo "ENVIRONMENT=DEV" >> $GITHUB_ENV
          echo "ENVIRONMENT_LOWER=dev" >> $GITHUB_ENV
          echo "APP_REVISION=${REV_NAME//\//-}" >> $GITHUB_ENV

      - name: configure variables
        run: |
          REGISTRY_NAME=${ENVIRONMENT_LOWER}akscr.azurecr.io
          APP_NAME=${GITHUB_REPOSITORY/'Matrix-Energia/'/}
          APP_NAME=${APP_NAME/matrix./}
          APP_NAME=${APP_NAME//./-}
          echo "APP_NAME=${APP_NAME}"                               >> $GITHUB_ENV
          echo "KUBE_CONFIG=MATRIX_${ENVIRONMENT}_AKS_KUBE_CONFIG"  >> $GITHUB_ENV
          echo "REGISTRY_NAME=${REGISTRY_NAME}"                     >> $GITHUB_ENV
          echo "REGISTRY_PWD=MATRIX_${ENVIRONMENT}_ACR_PASSWORD"    >> $GITHUB_ENV
          echo "REGISTRY_USR=MATRIX_${ENVIRONMENT}_ACR_USERNAME"    >> $GITHUB_ENV
          echo "IMAGE=${REGISTRY_NAME}/${GITHUB_REPOSITORY,,}"      >> $GITHUB_ENV
          echo "TAG=${GITHUB_SHA}"                                  >> $GITHUB_ENV
          echo "CONFIG=${ENVIRONMENT}_CONFIG"                       >> $GITHUB_ENV

      - name: docker login
        uses: Azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets[env.REGISTRY_USR] }}
          password: ${{ secrets[env.REGISTRY_PWD] }}

      - name: docker build
        run: |
          docker build \
            --build-arg ${{ inputs.tokenName }}=${{ secrets.PACKAGES_TOKEN }} \
            -t ${IMAGE}:${TAG} \
            -t ${IMAGE}:latest \
            .

      - name: docker push
        run: docker push --all-tags ${IMAGE}

      - name: clone helms
        uses: actions/checkout@v3
        with:
          repository: 'Matrix-Energia/matrix.devops.template.charts.git'
          ref: ${{ env.CHART_REVISION }}
          path: ${{ env.CHART_PATH }}
          token: ${{ secrets.GIT_TOKEN_CUSTOM }}

      - name: connect to cluster
        uses: Azure/k8s-set-context@v2
        with:
          kubeconfig: ${{ secrets[env.KUBE_CONFIG] }}

      - name: install helm tool
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: query variables
        id: parseEnvironmentVariables
        uses: mikefarah/yq@master
        with: 
          cmd: |
            echo ${{ secrets[env.CONFIG] }} | base64 -d | yq e '.. | select(. == "*") | {(path | . as $x | (.[] | select((. | tag) == "!!int") |= (["[", ., "]"] | join(""))) | $x | join(".") | sub(".\[", "[")): .} ' - | base64 -w 0

      - name: install helm chart
        run: |
          helm upgrade ${{ env.APP_NAME }}-${{ env.APP_REVISION }} \
            ${{ env.CHART_PATH }}/${{ env.CHART_TYPE }} \
            --install \
            --wait \
            --namespace ${{ inputs.namespace }} \
            --values ${{ inputs.values }} \
            --set environment=${{ env.ENVIRONMENT_LOWER }} \
            --set image=${{ env.IMAGE }}:${{ env.TAG }} \
            --set config=${{ steps.parseEnvironmentVariables.outputs.result }}
