name: k8s Api

env:
  HELM_VERSION: v3.9.2
  CHART_REPOSITORY: 'Matrix-Energia/matrix.devops.template.charts.git'
  CHART_REVISION: v7
  CHART_PATH: charts
  CHART_TYPE: api
  GIT_TOKEN_NAME: GIT_TOKEN_CUSTOM

on:
  workflow_call:
    inputs:
      namespace:
        type: string
        required: false
        default: matrix-apps
      values:
        type: string
        required: false
        default: .ci/values.yaml
      tokenName:
        type: string
        required: false
        default: GIT_TOKEN

jobs:
  app-configuration:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.configure-app.outputs.name }}
      revision: ${{ steps.configure-app.outputs.name }}
      tag: ${{ steps.configure-app.outputs.tag }}
      image: ${{ steps.configure-app.outputs.image }}
      config-b64: ${{ steps.parse-variables.outputs.config-b64 }} # This parses the env var form a complex yaml to scalar properties then convert b64 encode it

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets[env.GIT_TOKEN_NAME] }}

      - name: prd
        if: github.ref_name == 'main'
        run: |
          echo "ENVIRONMENT=PRD"                >> $GITHUB_ENV
          echo "APP_REVISION=prd"               >> $GITHUB_ENV

      - name: hml
        if: github.ref_name == 'hml'
        run: |
          echo "ENVIRONMENT=HML"                >> $GITHUB_ENV
          echo "APP_REVISION=hml"               >> $GITHUB_ENV

      - name: not prd or hml
        if: ( github.ref_name != 'main' && github.ref_name != 'hml' )
        run: |
          REV_NAME=${GITHUB_REF_NAME,,}
          echo "ENVIRONMENT=DEV"                >> $GITHUB_ENV                  
          echo "APP_REVISION=${REV_NAME//\//-}" >> $GITHUB_ENV

      - name: set-variables
        run: |
          APP_NAME="${GITHUB_REPOSITORY/'Matrix-Energia/'/}"
          APP_NAME="${APP_NAME/matrix./}"
          echo APP_NAME="${APP_NAME//./-}"                            >> $GITHUB_ENV
          echo APP_TAG="${GITHUB_SHA:0:8}-${GITHUB_RUN_NUMBER}"       >> $GITHUB_ENV
          echo APP_IMAGE="${REGISTRY_NAME}/${GITHUB_REPOSITORY,,}"    >> $GITHUB_ENV
          echo APP_CONFIG="${ENVIRONMENT}_CONFIG"                     >> $GITHUB_ENV    
          echo KUBE_CONFIG="MATRIX_${ENVIRONMENT}_AKS_KUBE_CONFIG"    >> $GITHUB_ENV 
          echo REGISTRY_NAME="${ENVIRONMENT,,}akscr.azurecr.io"       >> $GITHUB_ENV 
          echo REGISTRY_USR="MATRIX_${ENVIRONMENT}_ACR_USERNAME"      >> $GITHUB_ENV 
          echo REGISTRY_PWD="MATRIX_${ENVIRONMENT}_ACR_PASSWORD"      >> $GITHUB_ENV 
          echo ENVIRONMENT_LOWER="${ENVIRONMENT,,}"                   >> $GITHUB_ENV

      - name: Configure app
        id: configure-app
        run: |
          echo "::set-output name=environment::${ENVIRONMENT_LOWER}"
          echo "::set-output name=name::${APP_NAME}"
          echo "::set-output name=revision::${APP_REVISION}"
          echo "::set-output name=tag::${APP_TAG}"
          echo "::set-output name=image::${APP_IMAGE}"

      - name: make yaml cfg plain
        id: parse-variables
        uses: mikefarah/yq@master
        with: 
          cmd: |
            echo ${{ secrets[env.APP_CONFIG] }} > .cfgComplex
            cat .cfgComplex | base64 -d | yq e '.. | select(. == "*") | {(path | . as $x | (.[] | select((. | tag) == "!!int") |= (["[", ., "]"] | join(""))) | $x | join(".") | sub(".\[", "[")): .} ' - | base64 -w0 > .cfgFlat
            echo "::set-output name=config-b64::$(cat .cfgFlat)"
      
      - name: connect to cluster
        uses: Azure/k8s-set-context@v2
        with:
          kubeconfig: ${{ secrets[env.KUBE_CONFIG] }}

      - name: docker login
        uses: Azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets[env.REGISTRY_USR] }}
          password: ${{ secrets[env.REGISTRY_PWD] }}
         
  build-and-push:
    runs-on: ubuntu-latest
    needs: [ app-configuration ]
    steps:
      - name: docker build
        run: |
          docker build \
            --build-arg ${{ inputs.tokenName }}=${{ secrets.PACKAGES_TOKEN }} \
            -t ${{ needs.app-configuration.outputs.image }}:${{ needs.app-configuration.outputs.tag }} \
            -t ${{ needs.app-configuration.outputs.image }}:latest \
            .

      - name: docker push
        run: docker push --all-tags ${{ needs.app-configuration.outputs.image }}

  setup-helm-tool:
    runs-on: ubuntu-latest
    needs: [ app-configuration ]
    steps:
      - name: install helm tool
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

  setup-helm-chart:
    runs-on: ubuntu-latest
    steps:
      - name: clone helms
        uses: actions/checkout@v3
        with:
          repository: ${{ env.CHART_REPOSITORY }}
          ref: ${{ env.CHART_REVISION }}
          path: ${{ env.CHART_PATH }}
          token: ${{ secrets[env.GIT_TOKEN_NAME] }}

  helm:
    runs-on: ubuntu-latest
    needs: [ app-configuration, build-and-push, setup-helm-tool, setup-helm-chart ]
    steps:
      - name: install helm chart
        run: |
          helm upgrade ${{ needs.app-configuration.outputs.name }}-${{ needs.app-configuration.outputs.revision }} \
            ${{ env.CHART_PATH }}/${{ env.CHART_TYPE }} \
            --install \
            --wait \
            --timeout 6m0s \
            --namespace '${{ inputs.namespace }}' \
            --values    '${{ inputs.values }}' \
            --set       environment='${{ needs.app-configuration.outputs.environment }}' \
            --set       image='${{ needs.app-configuration.outputs.image }}:${{ needs.app-configuration.outputs.tag }}' \
            --set       repository='${{ github.repository }}' \
            --set       config='${{ needs.app-configuration.outputs.config-b64 }}'
